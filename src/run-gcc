#!/usr/bin/env bash
# Compile and run C/C++ programs

set -euo pipefail

# Function to display an error message and exit
error_exit() {
  echo "Error: $1" >&2
  exit 1
}

# Function to display help message
show_help() {
  echo "Usage: $(basename "$0") [OPTIONS] <source_file>"
  echo
  echo "Options:"
  echo "  -h, --help       Show this help message"
  echo "  -v, --version    Show script version"
  echo
  echo "Description:"
  echo "  This script compiles and runs C/C++ programs."
  echo "  Provide a C or C++ source file as an argument."
}

# Function to display version
show_version() {
  echo "$(basename "$0") version 0.1.0"
}

# Function to determine the compiler based on file extension
get_compiler() {
  local extension="${1##*.}"
  case "$extension" in
  c) echo "gcc" ;;
  cpp | cc | cxx) echo "g++" ;;
  *) error_exit "Unsupported file type '$extension'" ;;
  esac
}

# Function to compile the source file
compile_file() {
  local compiler="$1"
  local source_file="$2"
  local output_file="$3"
  "$compiler" -Wall -Wextra -o "$output_file" "$source_file"
}

# Function to run the compiled program
run_program() {
  local output_file="$1"
  ./"$output_file"
}

# Main function
main() {
  # Check for arguments
  if [[ $# -eq 0 ]]; then
    error_exit "Please specify a C/C++ file"
  fi

  case "$1" in
  -h | --help)
    show_help
    exit 0
    ;;
  -v | --version)
    show_version
    exit 0
    ;;
  esac

  local source_file="$1"
  local source_filename="${source_file##*/}"
  local output_file="${source_filename%.*}"

  # Check if the file exists
  if [[ ! -f "$source_file" ]]; then
    error_exit "File '$source_file' does not exist"
  fi

  # Determine the compiler
  local compiler
  compiler=$(get_compiler "$source_file")

  # Compile, run, and clean up
  compile_file "$compiler" "$source_file" "$output_file"
  run_program "$output_file"
  rm -f "$output_file"
}

main "$@"
