#!/usr/bin/env bash
# Compile and run C/C++ programs

set -euo pipefail

# Default configuration values
# General configuration
show_diff="false"
cleanup_output="true"
color_output="true"
execution_timeout=""
skip_config="false"

# Compiler configuration
compiler_flags="-Wall -Wextra"
c_flags="-std=c11"
cpp_flags="-std=c++17"
linker_flags="-lm"
default_c_compiler="gcc"
default_cpp_compiler="g++"

# Input/output configuration
default_input_file=""
default_expected_file=""

# Function to load configuration files
load_config() {
  local global_config="$HOME/.run-gccrc"
  local local_config="./.run-gccrc"

  # Source global configuration if it exists
  if [[ -f "$global_config" ]]; then
    # shellcheck source=/dev/null
    source "$global_config"
  fi

  # Source local configuration if it exists
  if [[ -f "$local_config" ]]; then
    # shellcheck source=/dev/null
    source "$local_config"
  fi
}

# Function to display an error message and exit
error_exit() {
  if [[ "$color_output" == "true" ]]; then
    echo -e "\e[31m\e[1mError:\e[0m $1" >&2
  else
    echo "Error: $1" >&2
  fi
  exit 1
}

# Function to display help message
show_help() {
  echo "Usage: $(basename "$0") <source_file> [OPTIONS]"
  echo "       $(basename "$0") --generate-config [--global|-g|--local]"
  echo
  echo "Options:"
  echo "  -h, --help            Show this help message"
  echo "  -v, --version         Show script version"
  echo "  -i, --input           Specify input file"
  echo "  -e, --expected        Specify expected output file for comparison"
  echo "  -d, --diff            Show difference between actual and expected output"
  echo "  -n, --no-config       Skip loading configuration files"
  echo "      --generate-config Generate a configuration file (.run-gccrc)"
  echo "  -g, --global          Generate global config file (in \$HOME)"
  echo "      --local           Generate local config file (default, in current directory)"
  echo
  echo "Description:"
  echo "  A versatile Bash script to compile and run C/C++ programs with"
  echo "  input/output handling, output comparison, and more."
}

# Function to display version
show_version() {
  echo "$(basename "$0") version 1.2.0"
}

# Function to generate configuration file
generate_config() {
  local config_type="$1"  # "global" or "local"
  local config_file=""
  
  case "$config_type" in
    global)
      config_file="$HOME/.run-gccrc"
      ;;
    local)
      config_file="./.run-gccrc"
      ;;
    *)
      error_exit "Invalid config type '$config_type'. Use 'global' or 'local'."
      ;;
  esac
  
  # Check if file already exists
  if [[ -f "$config_file" ]]; then
    if [[ "$color_output" == "true" ]]; then
      echo -e "\e[33m\e[1mWarning:\e[0m Configuration file '$config_file' already exists."
    else
      echo "Warning: Configuration file '$config_file' already exists."
    fi
    read -p "Do you want to overwrite it? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Configuration generation cancelled."
      exit 0
    fi
  fi
  
  # Generate the configuration file
  cat > "$config_file" << 'EOF'
#!/usr/bin/env bash
# run-gcc configuration file
# This file is sourced by run-gcc to set default values

# General configuration
show_diff="false"
cleanup_output="true"
color_output="true"
execution_timeout=""

# Compiler configuration
compiler_flags="-Wall -Wextra"
c_flags="-std=c11"
cpp_flags="-std=c++17"
linker_flags="-lm"
default_c_compiler="gcc"
default_cpp_compiler="g++"

# Input/output configuration
default_input_file=""
default_expected_file=""
EOF
  
  if [[ "$color_output" == "true" ]]; then
    echo -e "\e[32m\e[1mSuccess:\e[0m Configuration file created at '$config_file'"
  else
    echo "Success: Configuration file created at '$config_file'"
  fi
  echo "You can now edit this file to customize your default settings."
}

# Function to determine the compiler based on file extension
get_compiler() {
  local extension="${1##*.}"
  case "$extension" in
  c) echo "$default_c_compiler" ;;
  cpp | cc | cxx) echo "$default_cpp_compiler" ;;
  *) error_exit "Unsupported file type '$extension'" ;;
  esac
}

# Function to compile the source file
compile_file() {
  local compiler="$1"
  local source_file="$2"
  local output_file="$3"
  local extension="${source_file##*.}"
  local specific_flags=""

  # Use language-specific flags
  case "$extension" in
  c) specific_flags="$c_flags" ;;
  cpp | cc | cxx) specific_flags="$cpp_flags" ;;
  esac

  "$compiler" $compiler_flags $specific_flags -o "$output_file" "$source_file" $linker_flags
}

# Function to run the compiled program
run_program() {
  local output_file="$1"
  local input_file="$2"
  local program_output

  if [[ -n "$execution_timeout" ]]; then
    if [[ -n "$input_file" ]]; then
      program_output=$(timeout "$execution_timeout" ./"$output_file" <"$input_file")
    else
      program_output=$(timeout "$execution_timeout" ./"$output_file")
    fi
  else
    if [[ -n "$input_file" ]]; then
      program_output=$(./"$output_file" <"$input_file")
    else
      program_output=$(./"$output_file")
    fi
  fi

  echo "$program_output"
}

# Function to compare output with expected output
compare_output() {
  local program_output="$1"
  local expected_file="$2"
  local show_diff="$3"
  if diff <(echo "$program_output") "$expected_file" >/dev/null; then
    if [[ "$color_output" == "true" ]]; then
      echo -e "\e[32m\e[1mSuccess:\e[0m Program output matches the expected output."
    else
      echo "Success: Program output matches the expected output."
    fi
  else
    if [[ "$color_output" == "true" ]]; then
      echo -e "\e[31m\e[1mFailure:\e[0m Program output does not match the expected output."
    else
      echo "Failure: Program output does not match the expected output."
    fi
    if [[ "$show_diff" == "true" ]]; then
      echo
      echo "Difference:"
      diff <(echo "$program_output") "$expected_file" || true
    fi
    return 1
  fi
}

# Main function
main() {
  local input_file=""
  local expected_file=""
  local source_file=""
  local exit_code=0
  local generate_config_flag="false"
  local config_type="local"

  # Check if help, version, or generate-config options are provided
  if [[ $# -ge 1 ]]; then
    case "$1" in
    -h | --help)
      show_help
      exit 0
      ;;
    -v | --version)
      show_version
      exit 0
      ;;
    --generate-config)
      generate_config_flag="true"
      shift
      
      # Check for global/local flag
      if [[ $# -gt 0 ]]; then
        case "$1" in
        -g | --global)
          config_type="global"
          shift
          ;;
        --local)
          config_type="local"
          shift
          ;;
        -*)
          error_exit "Unknown option '$1' for --generate-config"
          ;;
        esac
      fi
      
      # If only generating config, do it and exit
      if [[ $# -eq 0 ]]; then
        generate_config "$config_type"
        exit 0
      fi
      ;;
    esac
  fi

  # If we're not generating config, ensure at least one argument is provided
  if [[ "$generate_config_flag" == "false" && $# -lt 1 ]]; then
    error_exit "Please specify a C/C++ file"
  fi

  # Extract the source file as the first argument (if not generating config only)
  if [[ "$generate_config_flag" == "false" ]]; then
    source_file="$1"
    shift
  fi

  # Parse remaining arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -i | --input)
      if [[ $# -lt 2 ]]; then
        error_exit "Missing input file after '$1'"
      fi
      input_file="$2"
      shift 2
      ;;
    -e | --expected)
      if [[ $# -lt 2 ]]; then
        error_exit "Missing expected output file after '$1'"
      fi
      expected_file="$2"
      shift 2
      ;;
    -d | --diff)
      show_diff="true"
      shift
      ;;
    -n | --no-config)
      skip_config="true"
      shift
      ;;
    -*)
      error_exit "Unknown option '$1'"
      ;;
    *)
      error_exit "Unexpected argument '$1'"
      ;;
    esac
  done

  # If we were generating config and got here, generate it now
  if [[ "$generate_config_flag" == "true" ]]; then
    generate_config "$config_type"
    exit 0
  fi

  # Load configuration files unless skipped
  if [[ "$skip_config" != "true" ]]; then
    load_config

    # Override input file and expected file if not already set manually
    input_file="${input_file:-$default_input_file}"
    expected_file="${expected_file:-$default_expected_file}"
  fi

  local source_filename="${source_file##*/}"
  local output_file="${source_filename%.*}"

  # Check if the source file exists
  if [[ ! -f "$source_file" ]]; then
    error_exit "File '$source_file' does not exist"
  fi

  # Check if the input file exists (if provided)
  if [[ -n "$input_file" && ! -f "$input_file" ]]; then
    error_exit "Input file '$input_file' does not exist"
  fi

  # Check if the expected output file exists (if provided)
  if [[ -n "$expected_file" && ! -f "$expected_file" ]]; then
    error_exit "Expected output file '$expected_file' does not exist"
  fi

  # Determine the compiler
  local compiler
  compiler=$(get_compiler "$source_file")

  # Compile, run, and clean up
  compile_file "$compiler" "$source_file" "$output_file"
  local program_output
  program_output=$(run_program "$output_file" "$input_file") || exit_code=$?
  if [[ -n "$expected_file" ]]; then
    compare_output "$program_output" "$expected_file" "$show_diff" || exit_code=$?
  else
    echo "$program_output"
  fi

  if [[ "$cleanup_output" == "true" ]]; then
    rm -f "$output_file"
  fi

  exit $exit_code
}

main "$@"
