#!/usr/bin/env bash
# Compile and run C/C++ programs

set -euo pipefail

# Function to display an error message and exit
error_exit() {
  echo -e "\e[31m\e[1mError:\e[0m $1" >&2
  exit 1
}

# Function to display help message
show_help() {
  echo "Usage: $(basename "$0") <source_file> [OPTIONS]"
  echo
  echo "Options:"
  echo "  -h, --help       Show this help message"
  echo "  -v, --version    Show script version"
  echo "  -i, --input      Specify input file"
  echo "  -e, --expected   Specify expected output file for comparison"
  echo "  -d, --diff       Show difference between actual and expected output"
  echo
  echo "Description:"
  echo "  A versatile Bash script to compile and run C/C++ programs with"
  echo "  input/output handling, output comparison, and more."
}

# Function to display version
show_version() {
  echo "$(basename "$0") version 0.3.0"
}

# Function to determine the compiler based on file extension
get_compiler() {
  local extension="${1##*.}"
  case "$extension" in
  c) echo "gcc" ;;
  cpp | cc | cxx) echo "g++" ;;
  *) error_exit "Unsupported file type '$extension'" ;;
  esac
}

# Function to compile the source file
compile_file() {
  local compiler="$1"
  local source_file="$2"
  local output_file="$3"
  "$compiler" -Wall -Wextra -o "$output_file" "$source_file"
}

# Function to run the compiled program
run_program() {
  local output_file="$1"
  local input_file="$2"
  local program_output
  if [[ -n "$input_file" ]]; then
    program_output=$(./"$output_file" <"$input_file")
  else
    program_output=$(./"$output_file")
  fi
  echo "$program_output"
}

# Function to compare output with expected output
compare_output() {
  local program_output="$1"
  local expected_file="$2"
  local show_diff="$3"
  if diff <(echo "$program_output") "$expected_file" >/dev/null; then
    echo -e "\e[32m\e[1mSuccess:\e[0m Program output matches the expected output."
  else
    echo -e "\e[31m\e[1mFailure:\e[0m Program output does not match the expected output."
    if [[ "$show_diff" == "true" ]]; then
      echo
      echo -e "\e[34m\e[1mDifference:\e[0m"
      diff <(echo "$program_output") "$expected_file" || true
    fi
    return 1
  fi
}

# Main function
main() {
  local input_file=""
  local expected_file=""
  local source_file=""
  local show_diff="false"
  local exit_code=0

  # Check if help or version options are provided
  if [[ $# -ge 1 ]]; then
    case "$1" in
    -h | --help)
      show_help
      exit 0
      ;;
    -v | --version)
      show_version
      exit 0
      ;;
    esac
  fi

  # Ensure at least one argument is provided
  if [[ $# -lt 1 ]]; then
    error_exit "Please specify a C/C++ file"
  fi

  # Extract the source file as the first argument
  source_file="$1"
  shift

  # Parse remaining arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      show_help
      exit 0
      ;;
    -v | --version)
      show_version
      exit 0
      ;;
    -i | --input)
      if [[ $# -lt 2 ]]; then
        error_exit "Missing input file after '$1'"
      fi
      input_file="$2"
      shift 2
      ;;
    -e | --expected)
      if [[ $# -lt 2 ]]; then
        error_exit "Missing expected output file after '$1'"
      fi
      expected_file="$2"
      shift 2
      ;;
    -d | --diff)
      show_diff="true"
      shift
      ;;
    -*)
      error_exit "Unknown option '$1'"
      ;;
    *)
      error_exit "Unexpected argument '$1'"
      ;;
    esac
  done

  local source_filename="${source_file##*/}"
  local output_file="${source_filename%.*}"

  # Check if the source file exists
  if [[ ! -f "$source_file" ]]; then
    error_exit "File '$source_file' does not exist"
  fi

  # Check if the input file exists (if provided)
  if [[ -n "$input_file" && ! -f "$input_file" ]]; then
    error_exit "Input file '$input_file' does not exist"
  fi

  # Check if the expected output file exists (if provided)
  if [[ -n "$expected_file" && ! -f "$expected_file" ]]; then
    error_exit "Expected output file '$expected_file' does not exist"
  fi

  # Determine the compiler
  local compiler
  compiler=$(get_compiler "$source_file")

  # Compile, run, and clean up
  compile_file "$compiler" "$source_file" "$output_file"
  local program_output
  program_output=$(run_program "$output_file" "$input_file") || exit_code=$?
  if [[ -n "$expected_file" ]]; then
    compare_output "$program_output" "$expected_file" "$show_diff" || exit_code=$?
  else
    echo "$program_output"
  fi
  rm -f "$output_file"

  exit $exit_code
}

main "$@"
